© 2023 giáo.làng *****



ĐỀ THI PE - PRACTICLE EXAM
* VIẾT 1 APP NHO NHỎ, GỒM 2 MÀN HÌNH:
- LOGIN
- QUẢN LÍ 1 CÁI GÌ ĐÓ - CRUD - THÊM XOÁ SỬA TÌM KIẾM CÁI GÌ ĐÓ: SÁCH, THIẾT BỊ ĐIỆN TỬ, NHÂN VIÊN, ĐỒ ĂN...

* YÊU CẦU SOLUTION: 3-LAYER & ENTITY FRAMEWORK CORE 
  - DATA ACCESS LAYER - REPOSITORY -> CSDL
    
  - BUSINESS LOGIC LAYER - SERVICE LAYER -> GIAO TIẾP VỚI CSDL VÀ VỚI UI

  - UI LAYER - WINDOWS FORMS -> UI GIAO TIẾP VỚI SERVICE
  
  > 3 PROJECTS TRONG SOURCE ĐỂ NỘP BÀI
  > KẾT NỐI CSDL KO ĐC HARD-CODE TRONG CODE, MÀ NẰM Ở FILE CẤU HÌNH .JSON
  > DÙNG DATABASE FIRST -> DÙNG CSDL ĐỂ GENERATE RA CLASS TƯƠNG ỨNG

* ĐỀ THI CHO MÌNH NHỮNG GÌ TRONG TAY???
-  WIFI ĐỂ DOWNLOAD NUGET PACKAGE - THƯ VIỆN - DEPENDENCY LIÊN QUAN ĐẾN ENTITY FRAMEWORK
- FILE ĐỀ BÀI
- FILE CƠ SỞ DỮ LIỆU .SQL CHỨA TABLE DÙNG ĐỂ VIẾT CODE: 3 TABLE
  > 1 TABLE DÀNH CHO LOGIN (USER/ACCOUNT KÈM ROLE)
                IF (ROLE == ) THÌ LÀM GÌ
  >  
- FILE HƯỚNG DẪN LÀM BÀI, TRONG ĐÓ CÓ
  > THÔNG TIN FILE CẤU HÌNH KẾT NỐI CSDL .JSON
  > CÓ THỂ CÓ THÊM ĐOẠN CODE ĐỌC FILE .JSON ĐỂ TA CÓ ĐC CHUỖI KẾT NỐI CSDL, TA XÀI CHUỖI KẾT NỐI CSDL NÀY
     KO CHƠI HARD-CODE

     > GIÚP KHẢO THÍ CHẤM BÀI ĐC, MÀ KO CẦN MỞ SOURCE ĐỂ SỬA CHUỖI KẾT NỐI CSDL!!!

  > NÉN SOLUTION LẠI, KO ĐC VƯỢT QUÁ 10MB

* ĐỌC KĨ GUIDELINE ĐỂ XEM ĐC MỞ APP NÀO: THƯỜNG LÀ WORD, VISUALSTUDIO, CMD,...
   MỞ NGOÀI DANH MỤC, 0 ĐIỂM

* 0 ĐIỂM:
  - CODE ERROR COMPILE KO ĐC
  - HARD-CODE CHUỖI KẾT NỐI CSDL
  - MỞ TOOL KO ĐC PHÉP

MÌNH PHẢI TỰ CHẾ UI 
                    !!!!!!!!!!! CODE 3-LAYER
                                  !!!!!!!!!!!!!!!!! KO HARDCODE KẾT NỐI CSDL 
                                               !!!!!!!!!!!!!! DÙNG DB CỦA TRƯỜNG ĐƯA, DB FIRST




I. KIỂM TRA (CẤU HÌNH) CỦA SQLSERVER ******************************

1. KIỂM TRA: SQL Server Configuration Manager

> Phím Windows + R
> Gõ lệnh dưới đây trong cửa sổ Run ứng với từng phiên bản SQL Server đã cài

SQL Server version		Command
----------------------			-------------------------------
SQL Server 2022			SQLServerManager16.msc
SQL Server 2019			SQLServerManager15.msc
SQL Server 2017			SQLServerManager14.msc
SQL Server 2016			SQLServerManager13.msc
SQL Server 2014			SQLServerManager12.msc
SQL Server 2012			SQLServerManager11.msc

2. KIỂM TRA: SQL Native Client Configuration | SQL Server Network Configuration 
> Client Protocols | Protocols for... 
> TCP/IP > Enabled > IP Addresses > IPAll > TCP Port > 1433
> Restart Server

3. KIỂM TRA: SQL Server Services
> Phím Windows + R
> Gõ lệnh: services.msc 
> SQL Server Browser Service: Start | Running

II. MÔI TRƯỜNG ".NET" VÀ "ENTITY FRAMEWORK CORE" (EF) ******************************
1. CÀI ĐẶT EF CLI (để thực thi các lệnh của EF)
> Gõ lệnh trong Terminal để cài đặt: dotnet tool install --global dotnet-ef
> Gõ lệnh trong Terminal để kiểm tra kết quả: dotnet tool list --global

2. CÀI ĐẶT THƯ VIỆN EF TRONG PROJECT
* Trong cửa sổ Manage NuGet Packages chọn:
> Microsoft.EntityFrameworkCore
> Microsoft.EntityFrameworkCore.Design
> Microsoft.EntityFrameworkCore.Tools
> Microsoft.EntityFrameworkCore.SqlServer

* Hoặc cài từ Terminal
> ...

* Hoặc cài từ Package Manager Console
> ...

3. CÀI ĐẶT THƯ VIỆN XỬ LÍ FILE CẤU HÌNH JSON
* Trong cửa sổ Manage NuGet Packages chọn:
> Microsoft.Extensions.Configuration
> Microsoft.Extensions.Configuration.Json

III. TẠO DỰ ÁN WINDOWS FORMS VỚI DATABASE FIRST ******************************

1. LẤY CONNECTION STRING TRONG VISUAL STUDIO, CHO CẢ 2 TRƯỜNG HỢP "WINDOWS AUTHENTICATION" VÀ "SQL SERVER AUTHENTICATION"

> Menu View | SQL Server Object Explorer | Add SQL Server | Properties | Thuộc tính Connection string

> Chuỗi kết nối CSDL (ví dụ): "Data Source=TRUONG-LANG\SQLEXPRESS;Integrated Security=True;Connect Timeout=30;Encrypt=False;Trust Server Certificate=False;Application Intent=ReadWrite;Multi Subnet Failover=False"

> Chuỗi kết nối CSDL (ví dụ): "Data Source=TRUONG-LANG\SQLEXPRESS;User ID=sa;Password=********;Connect Timeout=30;Encrypt=False;Trust Server Certificate=False;Application Intent=ReadWrite;Multi Subnet Failover=False"

2. GENERATE ENTITY CLASS TỪ DATABASE
>>>>> Trong cửa sổ Terminal gõ một trong các lệnh sau, nhớ thay chuỗi kết nối CSDL phù hợp với máy bạn:

* Lệnh này sẽ tạo ra các class ứng với các table và ứng với CSDL ở 2 thư mục Entities\ và Repositories\ ở project hiện hành:
> dotnet ef dbcontext scaffold "Server=localhost;Database=BookManagement2023DB;Trusted_Connection=true;Encrypt=false" "Microsoft.EntityFrameworkCore.SqlServer" --output-dir "Entities" --context-dir "Repositories"

* Lệnh này sẽ tạo ra các class ứng với các table và ứng với CSDL gom chung ở project hiện hành:
> dotnet ef dbcontext scaffold "Data Source=TRUONG-LANG\SQLEXPRESS;Initial Catalog=BookManagement2023DB;User ID=sa;Password=sa123456;Connect Timeout=30;Encrypt=False;Trust Server Certificate=False;Application Intent=ReadWrite;Multi Subnet Failover=False" "Microsoft.EntityFrameworkCore.SqlServer" --output-dir ./



* Hoặc trong cửa sổ Package Manager Console gõ lệnh:
> 

3. TẠO FILE CẤU HÌNH LƯU THÔNG TIN CHUỖI KẾT NỐI CƠ SỞ DỮ LIỆU THAY VÌ HARD-CODE TRONG "DBCONTEXT" CLASS 
* Tạo mới file JSON, tên là "appsettings.json" đặt chung trong project CÓ CHỨA UI - WINFORMS

> Nội dung file cấu hình:
{
  "ConnectionStrings": {
    "DBDefault": "Data Source=TRUONG-LANG\SQLEXPRESS;Initial Catalog=BookManagement2023DB;User ID=sa;Password=sa123456;Connect Timeout=30;Encrypt=False;Trust Server Certificate=False;Application Intent=ReadWrite;Multi Subnet Failover=False"
  }
}

* Những thông tin có thể thay đổi trong file này là: 
- Chuỗi kết nối phù hợp máy bạn
- Tên gọi cho chuỗi kết nối - ví dụ "DBDefault" có thể thay bằng chuỗi khác, tuỳ theo đề bài yêu cầu hay không

* Sử dụng thư viện Microsoft.Extensions.Configuration.Json đã add/ref ở trên để đọc file "appsettings.json" và trả về chuỗi kết nối CSDL nằm trong thuộc tính "DBDefault" ở trên qua hàm dưới đây:

   private string? GetConnectionString()
        {
            IConfiguration configuration = new ConfigurationBuilder()
                    .SetBasePath(Directory.GetCurrentDirectory())
                    .AddJsonFile("appsettings.json", true, true).Build();
            return configuration["ConnectionStrings:DBDefault"];
        }
//cach khac
+appsettings
{
  "exclude": [
    "**/bin",
    "**/bower_components",
    "**/jspm_packages",
    "**/node_modules",
    "**/obj",
    "**/platforms"
  ],
  "ConnectionStrings": {
    "PRN211DB": "Server=Tên server; database=PRN211DB; uid=sa; pwd=123"
  } 
}
--------------------------------------------------------------------------------------------------------------------------------------
+ DBContext
protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured) { 
                IConfigurationBuilder builder = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile("Appsettings.json", optional: true, reloadOnChange: true);
            IConfigurationRoot configuration = builder.Build();
            optionsBuilder.UseSqlServer(configuration.GetConnectionString("PRN211DB"));
        }
        }
